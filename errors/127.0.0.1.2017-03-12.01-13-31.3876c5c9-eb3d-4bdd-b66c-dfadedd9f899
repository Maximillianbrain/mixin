(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'musicroom'"
p3
sS'layer'
p4
S'/Users/Kaitaku/Documents/cs183/web2py/applications/mixin/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\n\nfrom gluon.contrib.websocket_messaging import websocket_send\nfrom gluon.contrib.simplejson import loads\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    if (auth.is_logged_in()):\n        redirect(URL(\'home\'))\n    form = auth()\n    if response.title:\n        welcomemessage = "Welcome to %s" % response.title\n    else:\n        welcomemessage = "Welcome"\n    #if form.process().accepted:\n    #    redirect(URL(\'home\'))\n    return dict(message=T(welcomemessage), form=form)\n\n\ndef user():\n    # Chapter 09 Authorization\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n@auth.requires_login()\ndef home():\n    form = SQLFORM(db.chatRoom)\n    if form.process(keepvalues=True).accepted:\n       redirect(URL(\'home\'))\n\n    chatRooms = db().select(db.chatRoom.ALL, orderby=db.chatRoom.id)\n    return dict(chatRooms=chatRooms, form=form)\n\n@auth.requires_login()\ndef musicroom():\n    users = db().select(db.auth_user.ALL, orderby=db.auth_user.id)\n    friendlist = (LI(""))\n    for i in users:\n        friendlist += (LI("%s" % i.first_name))\n\n    chats = db(db.chat.room_id == request.args[0]).select(db.chat.ALL, orderby=db.chat.time_created)\n\n    return dict(message=T(\'%(first_name)s\\\'s music room\' % auth.user),                    friendlist=friendlist,chats=chats)\n\ndef new_message():\n    form = SQLFORM(db.chat)\n    user_name = auth.user.first_name\n    chatroomId = request.vars.room_id\n    messageSent = user_name + ": " + request.vars.your_message\n    if form.accepts(request, formname=None):\n        websocket_send(\'http://127.0.0.1:8888\', messageSent, \'mykey\', \'chatroom\' + chatroomId)\n        return form\n    elif form.errors:\n        return TABLE(*[TR(k, v) for k, v in form.errors.items()])\n\n@auth.requires_login()\ndef settings():\n    return dict(form=auth())\n\n@auth.requires_login()\ndef about():\n    return dict()\n\n@auth.requires_login()\ndef contact():\n    return dict()\n\n@auth.requires_login()\ndef mbrain():\n    return dict()\n\n@auth.requires_login()\ndef sdinay():\n    return dict()\n\n@auth.requires_login()\ndef ryanho():\n    # not working on time_created\n    messages = db(Chat).select(orderby=~Chat.time_created)\n    return dict(messages=messages)\n\n@auth.requires_login()\ndef jli306():\n    return dict()\n\n@auth.requires_login()\ndef katakeda():\n    return dict()\n\n@auth.requires_login()\ndef cdwheele():\n    return dict()\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(musicroom)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/Kaitaku/Documents/cs183/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/Users/Kaitaku/Documents/cs183/web2py/applications/mixin/controllers/default.py", line 142, in <module>\n  File "/Users/Kaitaku/Documents/cs183/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/Kaitaku/Documents/cs183/web2py/gluon/tools.py", line 4241, in f\n    return action(*a, **b)\n  File "/Users/Kaitaku/Documents/cs183/web2py/applications/mixin/controllers/default.py", line 70, in musicroom\n    chats = db(db.chat.room_id == request.args[0]).select(db.chat.ALL, orderby=db.chat.time_created)\n  File "/Users/Kaitaku/Documents/cs183/web2py/gluon/packages/dal/pydal/objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/Users/Kaitaku/Documents/cs183/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 123, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/Users/Kaitaku/Documents/cs183/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "/Users/Kaitaku/Documents/cs183/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1170, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/Users/Kaitaku/Documents/cs183/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/Users/Kaitaku/Documents/cs183/web2py/gluon/packages/dal/pydal/adapters/base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "/Users/Kaitaku/Documents/cs183/web2py/gluon/packages/dal/pydal/adapters/base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "/Users/Kaitaku/Documents/cs183/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1442, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'musicroom\'\n'
p11
s.